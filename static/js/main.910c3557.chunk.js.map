{"version":3,"sources":["components/searchContainer.js","utils/staticVariables.js","components/weatherContainer.js","utils/reusableFunctions.js","components/app.js","serviceWorker.js","index.js"],"names":["searchContainer","setQuery","search","query","className","type","placeholder","onChange","e","target","value","onKeyPress","calendarMonth","calendarDays","api","WeatherContainer","weather","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","main","temp","App","useState","setWeather","appClassName","evt","key","axios","get","then","res","data","catch","err","console","warn","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8OAiBeA,EAfS,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,MAC3C,OACE,yBAAKC,UAAU,cACb,2BACEC,KAAK,OACLD,UAAU,aACVE,YAAY,YACZC,SAAU,SAAAC,GAAC,OAAIP,EAASO,EAAEC,OAAOC,QACjCA,MAAOP,EACPQ,WAAY,SAAAH,GAAC,OAAIN,EAAOM,QCXnBI,EAAgB,CAC3B,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAGWC,EAAe,CAC1B,SACA,SACA,UACA,YACA,WACA,SACA,YAGWC,EACN,mCADMA,EAEL,0CCPOC,EAjBU,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC1B,OACE,6BACE,yBAAKZ,UAAU,gBACb,yBAAKA,UAAU,YACZY,EAAQC,KADX,KACmBD,EAAQE,IAAIC,SAE/B,yBAAKf,UAAU,QCRI,SAAAgB,GACzB,IAAIC,EAAMR,EAAaO,EAAEE,UACrBC,EAAOH,EAAEI,UACTC,EAAQb,EAAcQ,EAAEM,YACxBC,EAAOP,EAAEQ,cACb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GDGLE,CAAY,IAAIC,QAEzC,yBAAK1B,UAAU,eACb,yBAAKA,UAAU,QAAQ2B,KAAKC,MAAMhB,EAAQiB,KAAKC,MAA/C,UACA,yBAAK9B,UAAU,WAAWY,EAAQA,QAAQ,GAAGiB,SEkCtCE,EAzCH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTjC,EADS,KACFF,EADE,OAEcmC,mBAAS,IAFvB,mBAETpB,EAFS,KAEAqB,EAFA,KAoBVC,EACoB,qBAAjBtB,EAAQiB,KACXjB,EAAQiB,KAAKC,KAAO,GAClB,WACA,OACF,MAEN,OACE,yBAAK9B,UAAWkC,GACd,8BACE,kBAAC,EAAD,CAAiBrC,SAAUA,EAAUC,OAd5B,SAAAqC,GACG,UAAZA,EAAIC,KAZRC,IACGC,IADH,UACU5B,EADV,sBACgCX,EADhC,+BAC4DW,IACzD6B,MAAK,SAAAC,GACJP,EAAWO,EAAIC,MACf5C,EAAS,OAEV6C,OAAM,SAAAC,GACLC,QAAQC,KAAK,qCAkBwC9C,MAAOA,IACnC,qBAAjBa,EAAQiB,KACd,kBAAC,EAAD,CAAkBjB,QAASA,IAE3B,M,MC7BUkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,MAAK,SAAAmB,GACjCA,EAAaC,kB","file":"static/js/main.910c3557.chunk.js","sourcesContent":["import React from \"react\";\n\nconst searchContainer = ({ setQuery, search, query }) => {\n  return (\n    <div className=\"search-box\">\n      <input\n        type=\"text\"\n        className=\"search-bar\"\n        placeholder=\"Search...\"\n        onChange={e => setQuery(e.target.value)}\n        value={query}\n        onKeyPress={e => search(e)}\n      />\n    </div>\n  );\n};\n\nexport default searchContainer;\n","export const calendarMonth = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\"\n];\n\nexport const calendarDays = [\n  \"Sunday\",\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\"\n];\n\nexport const api = {\n  key: \"e55cfc3f76088520f1f68b60d89efbc9\",\n  base: \"https://api.openweathermap.org/data/2.5\"\n};\n","import React from \"react\";\nimport { dateBuilder } from \"../utils/reusableFunctions\";\n\nconst WeatherContainer = ({ weather }) => {\n  return (\n    <div>\n      <div className=\"location-box\">\n        <div className=\"location\">\n          {weather.name}, {weather.sys.country}\n        </div>\n        <div className=\"date\">{dateBuilder(new Date())}</div>\n      </div>\n      <div className=\"weather-box\">\n        <div className=\"temp\">{Math.round(weather.main.temp)}&#8451;</div>\n        <div className=\"weather\">{weather.weather[0].main}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default WeatherContainer;\n","import { calendarMonth, calendarDays } from \"./staticVariables\";\n\nexport const dateBuilder = d => {\n  let day = calendarDays[d.getDay()];\n  let date = d.getDate();\n  let month = calendarMonth[d.getMonth()];\n  let year = d.getFullYear();\n  return `${day} ${date} ${month} ${year}`;\n};\n","import React, { useState } from \"react\";\nimport axios from \"axios\";\n\nimport SearchContainer from \"./searchContainer\";\nimport WeatherContainer from \"./weatherContainer\";\nimport { api } from \"../utils/staticVariables\";\n\nconst App = () => {\n  const [query, setQuery] = useState(\"\");\n  const [weather, setWeather] = useState(\"\");\n\n  const fetchWeatherData = () => {\n    axios\n      .get(`${api.base}/weather?q=${query}&units=metric&APPID=${api.key}`)\n      .then(res => {\n        setWeather(res.data);\n        setQuery(\"\");\n      })\n      .catch(err => {\n        console.warn(\"ERROR OCCURED RETRIEVING DATA\");\n      });\n  };\n\n  const search = evt => {\n    if (evt.key === \"Enter\") fetchWeatherData();\n  };\n\n  const appClassName =\n    typeof weather.main !== \"undefined\"\n      ? weather.main.temp > 16\n        ? \"app warm\"\n        : \" app\"\n      : \"app\";\n\n  return (\n    <div className={appClassName}>\n      <main>\n        <SearchContainer setQuery={setQuery} search={search} query={query} />\n        {typeof weather.main !== \"undefined\" ? (\n          <WeatherContainer weather={weather} />\n        ) : (\n          \"\"\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/app\";\nimport \"./styles/styles.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}